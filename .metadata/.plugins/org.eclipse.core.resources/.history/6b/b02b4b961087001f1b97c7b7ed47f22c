/****************************Proto 1********************************************
 Author : Bruno De Kelper et Alexandre Ceriani
 Date   : 10-06-2016
 Description :
 GPIO : -User button (PB0 et PB1)
 -Reset button (NRST)
 -LED bleu (PC8) et verte (PC9)
 -Led externe au board (PC0-PC7)
 -I2C1 SDA (PB7) et SCL (PB6)
 -ADC (PA4 et PA5)
 -Bit Direction_FB (PA6 et PA7)
 -Bit Direction Gauche (LSB : PB12 MSB : PB13)
 -Bit Direction Droit (LSB : PB14 MSB : PB15)
 -Bit calibration (PA8)
 -PWM sur timer 3 channel 1 (PB4) et 2 (PB5)
 -USART2 RX (PA2) et TX (PA3)
 */

#include "main.h"
#include "usarts.h"
// Fréquence des Ticks du SysTick (en Hz)
#define MillisecondsIT ((uint32_t) 1000)

// Fonctions main
void SystemInit(void);

void Configure_Clock(void);
void NVIC_Configuration(void);
void SysTick_Handler(void);

int main(void) {
	__set_PRIMASK(1);
	SystemInit(); // Initialisation du système
	Configure_Clock();
	Configure_USART(); // Configurer l'USART
	NVIC_Configuration(); // Configurer le NVIC
	__set_PRIMASK(0);

	volatile uint32_t counter = 0;
	char stringtosend[50] = "salutation camarade!";
	DEBUG_FLAG_USART2=1;
	while (1) {
		send_debug_message_usart2(stringtosend);
		counter++;

		// Optionally add a delay or toggle an LED here for debugging
	}
	return 0;
}

__INLINE void Configure_Clock(void) {
	// Initializing RCC->CR to 0x00000000 so there are no undefined bits after reset
	RCC->CR = 0;

	// Turning on HSE, default value 8MHZ
	RCC->CR |= RCC_CR_HSEON;

	// Waiting for HSE to be stable
	while (!(RCC->CR & RCC_CR_HSERDY))
		;
	// Setting up the pre-scaler to 1
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;

	// Switching off the PLL so we can change its value
	RCC->CR &= ~RCC_CR_PLLON;

	// Waiting until PLL ready is cleared
	while (RCC->CR & RCC_CR_PLLRDY)
		;

	// Defining the PLL source
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV;

	// Defining the PLL upscaler we want (6 => 0110)
	RCC->CFGR |= RCC_CFGR_PLLMULL6;

	// Switching back on the PLL
	RCC->CR |= RCC_CR_PLLON; // Enable PLL
	// Waiting until the PLL is ready again
	while (!(RCC->CR & RCC_CR_PLLRDY))
		;

	// Setting up the output of the PLL as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;

	// Wait until the PLL is used as system clock
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
		;

	SystemCoreClockUpdate(); // Met à jour SystemCoreClock avec la config du RCC
	SysTick_Config(SystemCoreClock / MillisecondsIT); // Configure le SysTick à 1 ms
}

void NVIC_Configuration(void) {
	NVIC_SetPriority(USART2_IRQn, 1); // Définir la priorité (1 = moyenne)
	NVIC_EnableIRQ(USART2_IRQn); // Activer l'interruption USART2
}

